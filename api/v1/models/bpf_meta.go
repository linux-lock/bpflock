// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BpfMeta bpf meta
//
// swagger:model BpfMeta
type BpfMeta struct {

	// bpfmetadata
	Bpfmetadata *BpfMetadata `json:"bpfmetadata,omitempty"`

	// Defines the versioned schema of this representation of an object
	Bpfmetaver string `json:"bpfmetaver,omitempty"`

	// bpfspec
	Bpfspec *BpfSpec `json:"bpfspec,omitempty"`

	// Kind is a string value representing the REST resource this object represents.
	Kind string `json:"kind,omitempty"`
}

// Validate validates this bpf meta
func (m *BpfMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBpfmetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpfspec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BpfMeta) validateBpfmetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Bpfmetadata) { // not required
		return nil
	}

	if m.Bpfmetadata != nil {
		if err := m.Bpfmetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bpfmetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bpfmetadata")
			}
			return err
		}
	}

	return nil
}

func (m *BpfMeta) validateBpfspec(formats strfmt.Registry) error {
	if swag.IsZero(m.Bpfspec) { // not required
		return nil
	}

	if m.Bpfspec != nil {
		if err := m.Bpfspec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bpfspec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bpfspec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bpf meta based on the context it is used
func (m *BpfMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBpfmetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpfspec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BpfMeta) contextValidateBpfmetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Bpfmetadata != nil {
		if err := m.Bpfmetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bpfmetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bpfmetadata")
			}
			return err
		}
	}

	return nil
}

func (m *BpfMeta) contextValidateBpfspec(ctx context.Context, formats strfmt.Registry) error {

	if m.Bpfspec != nil {
		if err := m.Bpfspec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bpfspec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bpfspec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BpfMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BpfMeta) UnmarshalBinary(b []byte) error {
	var res BpfMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
